/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacion;

import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;
import logica.clases.Cliente;
import logica.clases.Direccion;
import logica.clases.Localidad;
import logica.clases.Paquete;
import logica.clases.Seccion;
import logica.clases.Tarifa;
import logica.fabrica.Fabrica;

/**
 *
 * @author leo
 */
public class IngresarDatosDePrueba extends javax.swing.JFrame {

    private Random random = new Random();

    public IngresarDatosDePrueba() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonCrearEnvioConDatos = new javax.swing.JButton();
        jButtonGenerarSeccion = new javax.swing.JButton();
        jButtonGenerarCliente = new javax.swing.JButton();
        jButtonGenerarTarifaEspecial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonCrearEnvioConDatos.setText("Crear envio con datos autogenerados");
        jButtonCrearEnvioConDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrearEnvioConDatosActionPerformed(evt);
            }
        });

        jButtonGenerarSeccion.setText("Generar seccion");
        jButtonGenerarSeccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarSeccionActionPerformed(evt);
            }
        });

        jButtonGenerarCliente.setText("Generar cliente");
        jButtonGenerarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarClienteActionPerformed(evt);
            }
        });

        jButtonGenerarTarifaEspecial.setText("Generar Tarifa Especial");
        jButtonGenerarTarifaEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarTarifaEspecialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonGenerarSeccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCrearEnvioConDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGenerarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGenerarTarifaEspecial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(89, 89, 89))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jButtonCrearEnvioConDatos)
                .addGap(18, 18, 18)
                .addComponent(jButtonGenerarSeccion)
                .addGap(18, 18, 18)
                .addComponent(jButtonGenerarCliente)
                .addGap(18, 18, 18)
                .addComponent(jButtonGenerarTarifaEspecial)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCrearEnvioConDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearEnvioConDatosActionPerformed
        //creacion de secciones
        this.generarSecciones();
        this.generarTarifas();
        this.generarEnvios(this.generarPesoPaqueteChico());
        this.generarEnvios(this.generarPesoPaqueteGrande());
        this.generarEnvios(this.generarPesoPaqueteChico());
        this.generarEnvios(this.generarPesoPaqueteMediano());
        this.generarEnvios(this.generarPesoPaqueteEspecial());
        this.generarEnvios(this.generarPesoPaqueteMediano());
        this.generarEnvios(this.generarPesoPaqueteGrande());
        this.generarEnvios(this.generarPesoPaqueteEspecial());
        JOptionPane.showMessageDialog(null, "Datos generadaos exitosamente", "Generación exitosa", JOptionPane.INFORMATION_MESSAGE);
    }

    private void generarEnvios(float pesoPaquete) {
        int idPrimerEnvio;
        //creacion de clientes
        Cliente cliente = new Cliente(this.generarCI(), this.generarNombre(), this.generarApellido(), String.valueOf(this.generarTelefono()));
        Fabrica.getInstancia().getControladorCliente().agregarCliente(cliente.getCedula(), cliente.getNombre(), cliente.getApellido(), Integer.parseInt(cliente.getTelefono()));
        Cliente segundoCliente = new Cliente(this.generarCI(), this.generarNombre(), this.generarApellido(), String.valueOf(this.generarTelefono()));
        Fabrica.getInstancia().getControladorCliente().agregarCliente(segundoCliente.getCedula(), segundoCliente.getNombre(), segundoCliente.getApellido(), Integer.parseInt(segundoCliente.getTelefono()));
        //creación de direcciones
        Direccion direccionO = new Direccion(this.generarCalle(), this.generarCalle(), this.generarApartamento(), this.generarNumeroPuerta(), 0, this.generarNombreLocalidad(), 0);
        Direccion direccionD = new Direccion(this.generarCalle(), this.generarCalle(), this.generarApartamento(), this.generarNumeroPuerta(), 0, this.generarNombreLocalidad(), 0);
        direccionO.setIdDireccion(Fabrica.getInstancia().getControladorEnvio().crearDireccion(direccionO.getCalle(), direccionO.getSegunda_calle(), direccionO.getNro_puerta(), direccionO.getDatos_adicionales()));
        direccionD.setIdDireccion(Fabrica.getInstancia().getControladorEnvio().crearDireccion(direccionD.getCalle(), direccionD.getSegunda_calle(), direccionD.getNro_puerta(), direccionD.getDatos_adicionales()));
        ArrayList<Localidad> localidades = Fabrica.getInstancia().getControladorLocalidad().obtenerLasLocalidades();
        int idRandomLocalidad = this.random.nextInt(localidades.size() - 1);
        Fabrica.getInstancia().getControladorEnvio().conexionLocalidad_Direccion(localidades.get(idRandomLocalidad).getIdLocalidad(), direccionO.getIdDireccion());
        Fabrica.getInstancia().getControladorEnvio().conexionLocalidad_Direccion(localidades.get(idRandomLocalidad).getIdLocalidad(), direccionD.getIdDireccion());
        //creación de paquete
        ArrayList<Seccion> secciones = Fabrica.getInstancia().getControladorSeccion().obtenerLasSecciones();
        int idRandomSeccion = this.random.nextInt(secciones.size() - 1);
        Paquete paquete = new Paquete(this.generarDescripcionPaquete(), pesoPaquete, this.generarBool(), pesoPaquete > 15, 0, secciones.get(idRandomSeccion).getNombre());
        int esFragilInt = paquete.isEsFragil() ? 1 : 0;
        int esEspecialInt = paquete.isEsEspecial() ? 1 : 0;
        paquete.setIdPaquete(Fabrica.getInstancia().getControladorEnvio().crearPaquete(paquete.getDescripcion(), paquete.getPeso(), esFragilInt, esEspecialInt));
        Fabrica.getInstancia().getControladorEnvio().conexionSeccion_Paquete(paquete.getIdPaquete(), secciones.get(idRandomSeccion).getIdSeccion());
        //crear Envio
        int idTarifa = this.idTarifaGenerada(pesoPaquete);
        idPrimerEnvio = Fabrica.getInstancia().getControladorEnvio().crearEnvio(paquete.getIdPaquete(),
                idTarifa,
                direccionO.getIdDireccion(),
                direccionD.getIdDireccion(),
                Fabrica.getInstancia().getControladorPago().crearPago(idTarifa, localidades.get(idRandomLocalidad).getIdLocalidad()), 0);
        Fabrica.getInstancia().getControladorEnvio().crearEstado(idPrimerEnvio, "preparando", "Envio en preparación");
        Fabrica.getInstancia().getControladorEnvio().conexionEnvio_Cliente(idPrimerEnvio, cliente.getCedula(), "Envio");
        Fabrica.getInstancia().getControladorEnvio().conexionEnvio_Cliente(idPrimerEnvio, segundoCliente.getCedula(), "Recibe");

    }//GEN-LAST:event_jButtonCrearEnvioConDatosActionPerformed
    private int idTarifaGenerada(float peso) {
        ArrayList<Tarifa> tarifas = Fabrica.getInstancia().getControladorEnvio().obtenerTarifasEspeciales();
        if (peso <= 5) {
            return 1;
        } else if (peso <= 10) {
            return 2;
        } else if (peso <= 15) {
            return 3;
        } else {
            return tarifas.get(this.random.nextInt(tarifas.size()-1)).getIdTarifa();
        }
    }

    private void jButtonGenerarSeccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarSeccionActionPerformed
        this.generarSecciones();
        JOptionPane.showMessageDialog(null, "Seccion generada exitosamente", "Generación exitosa", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonGenerarSeccionActionPerformed

    private void jButtonGenerarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarClienteActionPerformed
        Fabrica.getInstancia().getControladorCliente().agregarCliente(this.generarCI(), this.generarNombre(), this.generarApellido(), this.generarTelefono());
        Fabrica.getInstancia().getControladorCliente().agregarCliente(this.generarCI(), this.generarNombre(), this.generarApellido(), this.generarTelefono());
        Fabrica.getInstancia().getControladorCliente().agregarCliente(this.generarCI(), this.generarNombre(), this.generarApellido(), this.generarTelefono());
        Fabrica.getInstancia().getControladorCliente().agregarCliente(this.generarCI(), this.generarNombre(), this.generarApellido(), this.generarTelefono());
        Fabrica.getInstancia().getControladorCliente().agregarCliente(this.generarCI(), this.generarNombre(), this.generarApellido(), this.generarTelefono());
        JOptionPane.showMessageDialog(null, "Cliente generado exitosamente", "Generación exitosa", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonGenerarClienteActionPerformed

    private void jButtonGenerarTarifaEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarTarifaEspecialActionPerformed
        this.generarTarifas();
        JOptionPane.showMessageDialog(null, "Tarifa generada exitosamente", "Generación exitosa", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonGenerarTarifaEspecialActionPerformed

    //Datos CLiente
    public String generarNombre() {
        String[] nombres = {"Juan", "María", "Pedro", "Ana", "Luis", "Sofía", "Carlos", "Laura", "Miguel", "Elena"};
        String nombreAleatorio = nombres[this.random.nextInt(nombres.length)];
        return nombreAleatorio;
    }

    public String generarApellido() {
        String[] apellidos = {
            "García",
            "Martínez",
            "López",
            "Rodríguez",
            "Fernández",
            "Pérez",
            "González",
            "Sánchez",
            "Ramírez",
            "Torres"
        };
        String apellidoAleatorio = apellidos[this.random.nextInt(apellidos.length)];
        return apellidoAleatorio;
    }

    public int generarCI() {
        int CIAleatorio = this.random.nextInt(90000000) + 10000000;
        return CIAleatorio;
    }

    public int generarTelefono() {
        int telefonoAleatorio = this.random.nextInt(900000000) + 100000000;
        return telefonoAleatorio;
    }

    private void generarTarifas() {
        String[] nombres = {"Electrodomestico", "Bicicleta", "Televisor", "Microondas", "Mueble"};
        String[] tamanios = {"Chico", "Mediano", "Grande"};
        ArrayList<Tarifa> listaTarifas = Fabrica.getInstancia().getControladorEnvio().obtenerTarifasEspeciales();
        boolean seRepiteNombre = false;
        for (String nombre : nombres) {
            for (String tamanio : tamanios) {
                for (Tarifa seccion : listaTarifas) {
                    if (seccion.getNombre().equals(nombre + " " + tamanio)) {
                        seRepiteNombre = true;
                    }
                }
                if (!seRepiteNombre) {
                    Fabrica.getInstancia().getControladorTarifa().crearUnaTarifa(nombre + " " + tamanio, this.generarPrecioTarifaEspecial());
                } else {
                    seRepiteNombre = false;
                }
            }
        }
    }

    public int generarPrecioTarifaEspecial() {
        int PrecioTarifa = this.random.nextInt(900) + 100;
        return PrecioTarifa;
    }

    //Direcciones
    public String generarCalle() {
        String[] calles = {
            "Felipone",
            "Solano Garcia",
            "18 de Julio",
            "Leandro Gomez",
            "Bulevar artigas",
            "Lucas Piriz",
            "Av Salto",
            "Juncal",
            "Cerrito",
            "Charruas"
        };
        String calleAleatoria = calles[this.random.nextInt(calles.length)];
        return calleAleatoria;
    }

    public int generarNumeroPuerta() {
        int numeroCalle = this.random.nextInt(9000) + 100;
        return numeroCalle;
    }

    public String generarApartamento() {
        String[] apartamentos = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"};
        String apartamentoAleatorio = apartamentos[this.random.nextInt(apartamentos.length)];
        int numeroapartamento = this.random.nextInt(9) + 1;
        return apartamentoAleatorio + numeroapartamento;
    }

    //Paquetes
    public String generarDescripcionPaquete() {
        String[] objetos = {
            "mueble",
            "electrodoméstico",
            "Televisor",
            "ropa",
            "herramientas",
            "computadora",
            "material de construcción",
            "juguete",
            "producto alimenticio",
            "instrumento musical",
            "equipamiento deportivo",
            "planta",
            "microondas",
            "libros",
            "equipo médico"
        };
        String paqueteAleatorio = objetos[this.random.nextInt(objetos.length)];
        return paqueteAleatorio;
    }

    public float generarPesoPaqueteEspecial() {
        return this.random.nextFloat() * 75 + 15;
    }

    public float generarPesoPaqueteChico() {
        return this.random.nextFloat() * 4 + 1;
    }

    public float generarPesoPaqueteMediano() {
        return this.generarPesoPaqueteChico() + 5;
    }

    public float generarPesoPaqueteGrande() {
        return this.generarPesoPaqueteChico() + 10;
    }

    public Boolean generarBool() {
        Boolean bool = this.random.nextBoolean();
        return bool;
    }

    //Seccion
    public String generarNombreLocalidad() {
        String[] nombres = {
            "Barrio Norte",
            "Porvenir",
            "Constancia",
            "Esperanza",
            "Barrio Oeste",
            "Barrio Centro",
            "Barrio Este (Hasta Golf Club)",
            "Nuevo Paysandú",
            "Barrio Sur (Hasta San Félix)"
        };
        String nombreLocalidadAleatorio = nombres[this.random.nextInt(nombres.length)];
        return nombreLocalidadAleatorio;
    }

    private void generarSecciones() {
        String[] nombres = {
            "BN",
            "P",
            "C",
            "E",
            "BO",
            "BC",
            "BE",
            "NP",
            "BS"
        };
        ArrayList<Seccion> secciones = Fabrica.getInstancia().getControladorSeccion().obtenerLasSecciones();
        boolean seRepiteNombre = false;
        for (String nombre : nombres) {
            for (Seccion seccion : secciones) {
                if (seccion.getNombre().equals("Seccion " + nombre)) {
                    seRepiteNombre = true;
                }
            }
            if (!seRepiteNombre) {
                Fabrica.getInstancia().getControladorSeccion().agregarUnaSeccion("Seccion " + nombre, this.generarNombreLocalidad());
            } else {
                seRepiteNombre = false;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarDatosDePrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresarDatosDePrueba().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCrearEnvioConDatos;
    private javax.swing.JButton jButtonGenerarCliente;
    private javax.swing.JButton jButtonGenerarSeccion;
    private javax.swing.JButton jButtonGenerarTarifaEspecial;
    // End of variables declaration//GEN-END:variables
}
